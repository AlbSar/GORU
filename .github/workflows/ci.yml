name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 ruff pylint

      - name: Run Black (formatting check)
        run: black --check backend/app/

      - name: Run isort (import sorting check)
        run: isort --check-only --profile black backend/app/

      - name: Run Flake8 (linting)
        run: flake8 backend/app/

      - name: Run Ruff (fast linting)
        run: ruff check backend/app/

  build-test:
    runs-on: ubuntu-latest
    needs: lint-and-format
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: goru
          POSTGRES_PASSWORD: goru
          POSTGRES_DB: goru_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U goru"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python (for coverage upload)
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Docker image build
        run: |
          docker build -t goru-backend-test:ci -f backend/Dockerfile backend

      - name: Run tests with coverage
        env:
          DATABASE_URL: postgresql://goru:goru@localhost:5432/goru_db
        run: |
          docker run --rm -e DATABASE_URL=${DATABASE_URL} goru-backend-test:ci pytest --cov=app --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  mock-tests:
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Docker image build
        run: |
          docker build -t goru-backend-mock:ci -f backend/Dockerfile backend

      - name: Run mock tests
        env:
          USE_MOCK: true
        run: |
          docker run --rm -e USE_MOCK=${USE_MOCK} goru-backend-mock:ci pytest backend/app/tests/test_mock_endpoints.py -v