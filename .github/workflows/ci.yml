name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort ruff

      - name: Run Black (formatting check)
        run: black --check backend/app/

      - name: Run isort (import sorting check)
        run: isort --check-only --profile black backend/app/

      - name: Run Ruff (fast linting)
        run: ruff check backend/app/ --ignore E501,F401,F841,E722,E712,F821

  test-coverage:
    runs-on: ubuntu-latest
    needs: lint-and-format
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-cov coverage

      - name: Run comprehensive tests with coverage
        working-directory: ./backend
        env:
          USE_MOCK: true
          ENVIRONMENT: test
          TESTING: true
        run: |
          echo "üß™ Running comprehensive test suite with coverage..."
          python -m pytest app/tests/ -v --cov=app --cov-report=xml --cov-report=term-missing --cov-report=html --cov-fail-under=90

      - name: Check coverage threshold
        working-directory: ./backend
        run: |
          echo "üìä Checking coverage threshold..."
          coverage_percentage=$(python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          coverage = float(root.attrib['line-rate']) * 100
          print(f'{coverage:.1f}')
          ")
          echo "Coverage: ${coverage_percentage}%"
          if (( $(echo "$coverage_percentage < 90" | bc -l) )); then
            echo "‚ùå Coverage is below 90% threshold: ${coverage_percentage}%"
            exit 1
          else
            echo "‚úÖ Coverage threshold met: ${coverage_percentage}%"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: comprehensive-tests
          name: comprehensive-coverage
          fail_ci_if_error: false

      - name: Generate coverage report
        working-directory: ./backend
        run: |
          echo "üìà Generating coverage report..."
          python -c "
          import xml.etree.ElementTree as ET
          import json
          from datetime import datetime
          
          tree = ET.parse('coverage.xml')
          root = tree.getroot()
          
          coverage_data = {
              'timestamp': datetime.now().isoformat(),
              'total_coverage': float(root.attrib['line-rate']) * 100,
              'total_statements': int(root.attrib['statements']),
              'total_missed': int(root.attrib['missed']),
              'modules': {}
          }
          
          for package in root.findall('.//package'):
              for class_elem in package.findall('.//class'):
                  filename = class_elem.attrib.get('filename', 'unknown')
                  if filename not in coverage_data['modules']:
                      coverage_data['modules'][filename] = {
                          'statements': 0,
                          'missed': 0,
                          'coverage': 0
                      }
                  
                  statements = int(class_elem.attrib.get('statements', 0))
                  missed = int(class_elem.attrib.get('missed', 0))
                  coverage_data['modules'][filename]['statements'] += statements
                  coverage_data['modules'][filename]['missed'] += missed
          
          for filename, data in coverage_data['modules'].items():
              if data['statements'] > 0:
                  data['coverage'] = ((data['statements'] - data['missed']) / data['statements']) * 100
          
          with open('coverage_report.json', 'w') as f:
              json.dump(coverage_data, f, indent=2)
          
          print(f'Coverage Report Generated: {coverage_data[\"total_coverage\"]:.1f}%')
          "

      - name: Update README with coverage badge
        run: |
          echo "üîÑ Updating README with coverage badge..."
          coverage_percentage=$(python -c "
          import xml.etree.ElementTree as ET
          tree = ET.parse('backend/coverage.xml')
          root = tree.getroot()
          coverage = float(root.attrib['line-rate']) * 100
          print(f'{coverage:.0f}')
          ")
          
          # Update README.md with dynamic coverage badge
          sed -i "s/coverage-[0-9]*%25/coverage-${coverage_percentage}%25/g" README.md
          echo "‚úÖ README updated with coverage: ${coverage_percentage}%"

  build-test:
    runs-on: ubuntu-latest
    needs: test-coverage

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python (for coverage upload)
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Docker image build
        run: |
          docker build -t goru-backend-test:ci -f backend/Dockerfile backend

      - name: Run mock tests
        env:
          USE_MOCK: true
          ENVIRONMENT: test
          TESTING: true
        run: |
          docker run --rm -e USE_MOCK=${USE_MOCK} -e ENVIRONMENT=${ENVIRONMENT} -e TESTING=${TESTING} goru-backend-test:ci pytest app/tests/test_mock_endpoints.py -v

  coverage-trend:
    runs-on: ubuntu-latest
    needs: test-coverage
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Comment PR with coverage results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverageData = JSON.parse(fs.readFileSync('backend/coverage_report.json', 'utf8'));
            
            const coveragePercentage = coverageData.total_coverage.toFixed(1);
            const totalStatements = coverageData.total_statements;
            const totalMissed = coverageData.total_missed;
            
            let modulesReport = '';
            Object.entries(coverageData.modules)
              .sort(([,a], [,b]) => b.coverage - a.coverage)
              .slice(0, 10)
              .forEach(([module, data]) => {
                modulesReport += `- **${module}**: ${data.coverage.toFixed(1)}% (${data.statements - data.missed}/${data.statements})\n`;
              });
            
            const comment = `## üìä Coverage Report
            
            **Overall Coverage:** ${coveragePercentage}% ‚úÖ
            **Total Statements:** ${totalStatements}
            **Missed Statements:** ${totalMissed}
            
            ### Top 10 Modules by Coverage:
            ${modulesReport}
            
            ### Coverage Threshold Check:
            ${coveragePercentage >= 90 ? '‚úÖ **PASSED** - Coverage meets 90% threshold' : '‚ùå **FAILED** - Coverage below 90% threshold'}
            
            ---
            *Generated automatically by CI/CD Pipeline*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });